// @suite: Feature: prop

// @test: prop
// @squeeze
// ============================================================================

class Foo {
    prop p: number = 42;
    checkField(p) { assert.equal(this.#p, p); }
    checkShortcut(p) { assert.equal(_p, p); }
}


let foo = new Foo();

assert.equal(foo.p, 42);
foo.checkField(42);
foo.checkShortcut(42);

foo.p = 157;
assert.equal(foo.p, 157);
foo.checkField(157);
foo.checkShortcut(157);



// @test: private prop
// ============================================================================

class Foo {
    private prop p: number = 42;
    checkField(p) { assert.equal(this.#p, p); }
}


let foo = new Foo();

assert.equal(foo.p, undefined);

foo.p = 157;
foo.checkField(42);
assert.equal(foo.p, 157);



// @test: readonly prop
// ============================================================================

class Foo {
    readonly prop p: number = 42;
}

let foo = new Foo();

assert.throws(() => { foo.p = 157; });



// @test: static prop is unsupported
// ============================================================================

class Foo {
    static prop foo; // @error
}



// @test: shortcuts
// ============================================================================

let _foo = 0;

class Foo {
    prop foo;

    // _foo shouldn't be a shortcut inside of a static func/method
    static func staticFunc() { _foo = 1; }
    static staticMethod() { _foo = 2; }

    // _foo is a shortcut to this.#foo
    func instanceFunc() { _foo = 3; }
    instanceMethod() { _foo = 4; }

    assertPoundFoo(value) { assert.equal(this.#foo, value); }
}

assert.equal(_foo, 0);
Foo.staticFunc();
assert.equal(_foo, 1);
Foo.staticMethod();
assert.equal(_foo, 2);

let f = new Foo();
f.instanceFunc();
assert.equal(_foo, 2);
assert.equal(f.foo, 3);
f.assertPoundFoo(3);
f.instanceMethod();
assert.equal(_foo, 2);
assert.equal(f.foo, 4);
f.assertPoundFoo(4);



// @test: Custom getter/setter
// ============================================================================

class Foo {
    prop propWithCustomSetter: number;
    prop propWithCustomGetter: number;

    set propWithCustomSetter(x: number) {
        _propWithCustomSetter = 157;
    }

    get propWithCustomGetter(): number {
        return 157;
    }
}

let foo = new Foo();

foo.propWithCustomSetter = 42;
foo.propWithCustomGetter = 42;

assert.equal(foo.propWithCustomSetter, 157);
assert.equal(foo.propWithCustomSetter, 157);



// @test: Keyword as prop name
// ============================================================================

class Foo {
    prop for: string;
}

let f = new Foo();
f.for = "for";
assert.equal(f.for, "for");



// @test: 'prop' as name of method
// ============================================================================

class Foo {
    prop(a: number): string { return "Foo"; }
}

assert.equal((new Foo()).prop(42), "Foo");



// @test: Observers
// @options: { "observers": { "display": "D", "layout": "L" } }
// @typecheck
// ============================================================================

import { Nyx }

class View {
    prop needsLayout: boolean = false;
    prop needsDisplay: boolean = false;

    [ Nyx.observerSymbol ](arg: string) {
        if (arg == "D") {
            _needsDisplay = true;
        } else if (arg == "L") {
            _needsLayout = true;
        }
    }
}

class Button extends View {
    @display prop color: string = "#ff0000";
    @layout  prop title: string = "Title";
}

let button = new Button();
assert.equal(button.needsLayout, false);
assert.equal(button.needsDisplay, false);

button.color = "#ff0000"; // Button was red and is still red
assert.equal(button.needsDisplay, false); // needsDisplay still false

button.color = "#00ff00"; // Button was changed to green
assert.equal(button.needsDisplay, true); // needsDisplay is now true

button.title = "Title"; // Button title not changed
assert.equal(button.needsLayout, false); // needsLayout still false

button.title = "Different Title"; // Button title changed
assert.equal(button.needsLayout, true); // needsLayout is now true
