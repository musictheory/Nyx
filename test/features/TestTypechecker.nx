// @suite: Feature: Typechecker

// @test: Basic Usage
// @typecheck
// ============================================================================

let s: string = 4; //@type


type RectNumber = number;

interface Rect {
    x: RectNumber;
    y: RectNumber;
    width: number;
    height: number;
}



// @test: readonly modifier
// @typecheck
// ============================================================================

// Test "readonly" modifier of class field

class Foo {
    static readonly s: string;
    readonly x: string;
}

let f = new Foo();
f.x = "bar"; // @type

Foo.s = "bar"; // @type



// @test: interface optional field
// @typecheck
// ============================================================================

interface Point   { x: number; y: number; z?: number }
interface Point2D { x: number; y: number }
interface Point3D { x: number; y: number; z: number }

// Test optional method syntax
interface IFoo { maybeFunction?(): string; }
let f: IFoo = { }; f.maybeFunction?.();

let alpha:   Point = { x: 1, y: 2 };
let alpha3D: Point = { x: 1, y: 2, z: 3 };

let beta:   Point3D = { x: 1, y: 2 }; // @type
let beta3D: Point3D = { x: 1, y: 2, z: 3 };

function takesPoint(p: Point) { }
function takesPoint2D(p: Point2D) { }
function takesPoint3D(p: Point3D) { }

takesPoint(  alpha); takesPoint(  alpha3D); takesPoint(  beta); takesPoint(  beta3D);
takesPoint2D(alpha); takesPoint2D(alpha3D); takesPoint2D(beta); takesPoint2D(beta3D);

takesPoint3D(alpha);   // @type
takesPoint3D(alpha3D); // @type
takesPoint3D(beta);
takesPoint3D(beta3D);



// @test: 'as' expression
// @typecheck
// ============================================================================

enum Foo { foo, bar, baz };
enum Bar { foo, bar, baz };

function takesBar(x: Bar) { }
let x: Foo = Foo.foo;
takesBar(x as number as Bar);



// @test: postfix '!'
// @typecheck
// ============================================================================

function actuallyReturnsNonNullString(): string | null {
    return "foo";
}

function takesNonNullString(x: string): void { }

let x1 = actuallyReturnsNonNullString();
let x2 = actuallyReturnsNonNullString();

takesNonNullString(x1); // @type
takesNonNullString(x2!);



// @test: Test 'extends' on 'interface'
// @typecheck
// ============================================================================

interface IFoo { foo(): string }
interface IBar { bar(): string }

interface IFooBar extends IFoo, IBar { }

class FooBar {
    foo() { return "foo"; }
    bar() { return "bar"; }
}

let fooBar = new FooBar() as IFooBar;
fooBar.foo();
fooBar.bar();
fooBar.baz(); // @type



// @test: Allow void annotation on setter
// @typecheck
// ============================================================================

class Foo {
    #foo: string;
    get foo(): string { return this.#foo; }

    #bar: string;
    get bar(): string { return this.#bar; }

    // 'void' is ok and Nyx will strip it
    set foo(x: string): void { this.#foo = x; }

    // Anything else will not be stripped and TS will warn
    set bar(x: string): string[] { this.#bar = x; } // @type
}


// @test: Test 'type' as function
// @typecheck
// ============================================================================

function type(x: string) {
    assert.equal(x, "Foo");
    return "Bar";
}

assert.equal(type("Foo"), "Bar");



// @test: Edge cases
// @typecheck
// ============================================================================


// Check special case where type annotation is before <
assert.equal({ } as any as number < 42, false);

